# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpc_model.model_service_pb2 as model__service__pb2


class ModelServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Chat = channel.unary_unary(
                '/modelservice.ModelService/Chat',
                request_serializer=model__service__pb2.ChatCompletionRequest.SerializeToString,
                response_deserializer=model__service__pb2.ChatCompletionResponse.FromString,
                )
        self.StreamChat = channel.unary_stream(
                '/modelservice.ModelService/StreamChat',
                request_serializer=model__service__pb2.ChatCompletionRequest.SerializeToString,
                response_deserializer=model__service__pb2.ChatCompletionResponse.FromString,
                )
        self.Health = channel.unary_unary(
                '/modelservice.ModelService/Health',
                request_serializer=model__service__pb2.HealthRequest.SerializeToString,
                response_deserializer=model__service__pb2.HealthResponse.FromString,
                )
        self.StopService = channel.unary_unary(
                '/modelservice.ModelService/StopService',
                request_serializer=model__service__pb2.StopServiceRequest.SerializeToString,
                response_deserializer=model__service__pb2.StopServiceResponse.FromString,
                )


class ModelServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Chat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Health(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Chat': grpc.unary_unary_rpc_method_handler(
                    servicer.Chat,
                    request_deserializer=model__service__pb2.ChatCompletionRequest.FromString,
                    response_serializer=model__service__pb2.ChatCompletionResponse.SerializeToString,
            ),
            'StreamChat': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChat,
                    request_deserializer=model__service__pb2.ChatCompletionRequest.FromString,
                    response_serializer=model__service__pb2.ChatCompletionResponse.SerializeToString,
            ),
            'Health': grpc.unary_unary_rpc_method_handler(
                    servicer.Health,
                    request_deserializer=model__service__pb2.HealthRequest.FromString,
                    response_serializer=model__service__pb2.HealthResponse.SerializeToString,
            ),
            'StopService': grpc.unary_unary_rpc_method_handler(
                    servicer.StopService,
                    request_deserializer=model__service__pb2.StopServiceRequest.FromString,
                    response_serializer=model__service__pb2.StopServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'modelservice.ModelService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ModelService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Chat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelservice.ModelService/Chat',
            model__service__pb2.ChatCompletionRequest.SerializeToString,
            model__service__pb2.ChatCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamChat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/modelservice.ModelService/StreamChat',
            model__service__pb2.ChatCompletionRequest.SerializeToString,
            model__service__pb2.ChatCompletionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Health(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelservice.ModelService/Health',
            model__service__pb2.HealthRequest.SerializeToString,
            model__service__pb2.HealthResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StopService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/modelservice.ModelService/StopService',
            model__service__pb2.StopServiceRequest.SerializeToString,
            model__service__pb2.StopServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
